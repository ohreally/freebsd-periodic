#!/bin/sh

# $Id: 485.status-torrelay 845 2021-11-14 12:14:40Z rob $

########################################################################

# Display Tor relay status.

# Installation:
# - Copy this script to /usr/local/etc/periodic/daily/485.status-torrelay
# - Make it executable

# The execution of this script is disabled per default.
# To enable, set the following in /etc/periodic.conf:
#
#   daily_status_torrelay_enable="YES"
#
# To include the ports where Tor is listening in the report, also set
#
#   daily_status_torrelay_ports="YES"
#
# To include the date and time when the relay was last started, set
#
#   daily_status_torrelay_starttime="YES"

# To learn more about `periodic', see periodic(8) and periodic.conf(5).

########################################################################

# Copyright (c) 2021 Rob LA LAU <rob@ohreally.nl>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

########################################################################

###TODO
# - heartbeat-like messages
#   see /var/log/tor/notices.log
# - tor exit info (if this is an exit node)
# - support multiple instances

# Source global configuration.
[ -r /etc/defaults/periodic.conf ] && {
	. /etc/defaults/periodic.conf
	source_periodic_confs
}

# Get or set additional vars.
: ${daily_status_torrelay_ports:=NO}
: ${daily_status_torrelay_starttime:=NO}

# Convert user provided values to uppercase.
daily_status_torrelay_ports=$(echo "${daily_status_torrelay_ports}" | tr '[:lower:]' '[:upper:]')
daily_status_torrelay_starttime=$(echo "${daily_status_torrelay_starttime}" | tr '[:lower:]' '[:upper:]')

# This function receives the command line arguments
# as listed by `procstat -h argument ${pid}'.
gettorargs() {
	# Loop through the received string.
	while [ $# -gt 0 ]; do
		if [ "$1" = "-f" ] ; then
			# The -f parameter indicates the config file.
			configfile=$2
			shift
		elif [ "${1%%[[:alpha:]]*}" = "--" ]; then
			# If the first argument starts with '--',
			# the second argument is a value of interest.

			# This takes
			#    --DataDirectory /var/db/tor
			# and creates
			#    DataDirectory=/var/db/tor
			# which in turn allows the use of
			#    ${DataDirectory}
			# in the rest of the script.
			# And the same for --PidFile. --RunAsDaemon, ...
			# Even though it's not in line with the rest
			# of the script, we'll keep the camel case
			# to not over-complicate things.
			# If an option is specified multiple times, we only catch the last.
			eval "${1##--}=$2"
			shift
		fi
		shift
	done
}

# This function pretty-prints the information.
output() {
	printf " %-15s: %s\n" "${1## }" "${2## }"
}

case "${daily_status_torrelay_enable}" in
	[Yy][Ee][Ss])
		echo
		echo "Tor status:"

		# The default exit value (see periodic(8)).
		rc=1

		# PID.
		pid=$(service tor status | sed -e 's/[^[:digit:]]//g')
		if [ -z "${pid}" ]; then
			echo " Tor is not running."
			rc=3
		else
			# Command line arguments.
			gettorargs $(procstat -h argument ${pid})
			: ${configfile:=/usr/local/etc/tor/torrc}
			: ${DataDirectory:=/var/db/tor}

			# Resources.
			output "Memory" "$(( $(ps -p ${pid} -o rss | tail -n +2) / 1024)) MiB"
			output "CPU" "$(ps -p ${pid} -o %cpu | tail -n +2)%"

			# Fingerprint file.
			fpfile="${DataDirectory}/fingerprint"

			if [ ! -r ${DataDirectory} ]; then
				echo " The data directory is not readable (are you root?)."
				rc=2
			elif [ ! -f "${fpfile}" ]; then
				# Fingerprint file does not exist.
				echo " This is not a relay."
				rc=2
			else
				# Relay nickname and fingerprint.
				nickname=$(cat "${fpfile}")
				fingerprint=${nickname##* }
				output "Relay" "${nickname}"

				# Start time.
				[ "${daily_status_torrelay_starttime}" = "YES" ] && output "Start time" "$(ps -p ${pid} -o lstart | tail -n +2)"

				# Control port.
				# This may have been set on the command line,
				# which is why we have to work around the CamelCase.
				# ControlPort may be specified multiple times; we pick the first.
				: ${ControlPort:=$(grep -m 1 '^[[:space:]]*ControlPort[[:space:]]' "${configfile}" | cut -w -f 2)}
				#
				# If ControlPort is still empty, then ControlSocket may have been set.
				[ -z "${ControlPort}" ] && {
					: ${ControlSocket:=$(grep -m 1 '^[[:space:]]*ControlSocket[[:space:]]' "${configfile}" | cut -w -f 2)}
					[ -n "${ControlSocket}" ] && ControlPort="unix:${ControlSocket}"
				}
				#
				# If ControlPort was set to 'auto',
				# we can only hope that the port was written to a file.
				[ "${ControlPort}" = "auto" ] && {
					: ${ControlPortWriteToFile:=$(grep -m 1 '^[[:space:]]*ControlPortWriteToFile[[:space:]]' "${configfile}" | cut -w -f 2)}
					if [ -z "${ControlPortWriteToFile}" ]; then
						echo " ControlPort is set to 'auto',"
						echo " but the selected port is not stored in a file."
						echo " Impossible to determine how to communicate with Tor."
						exit 2
					else
						# Tor writes one or more newline terminated lines to the file
						# in one of the formats
						#   PORT=127.0.0.1:12345
						#   UNIX_PORT=/path/to/socket
						# We pick the first one again.
						ControlPort=$(grep -m 1 '^PORT=' "${ControlPortWriteToFile}" | cut -d = -f 2)
						[ -z "${ControlPort}" ] && {
							ControlPort=$(grep -m 1 '^UNIX_PORT=' "${ControlPortWriteToFile}" | cut -d = -f 2)
							[ -n "${ControlPort}" ] && ControlPort="unix:${ControlPort}"
						}
					fi
				}
				#
				# If we still haven't found a way to communicate with Tor
				# we may as well give up.
				[ -z "${ControlPort}" ] && {
					echo " Neither ControlPort nor ControlSocket seem to be set."
					echo " Impossible to determine how to communicate with Tor."
					exit 2
				}
				if [ "${ControlPort%%:*}" = "unix" ]; then
					# If ControlPort begins with 'unix:',
					# it's a Unix domain socket.
					controlopt="-U"
					controladdr=${ControlPort##unix:}
					controloutput=${ControlPort}
				else
					controladdr=${ControlPort%%:*}
					if [ "${controladdr}" = "${ControlPort}" ]; then
						controladdr=127.0.0.1
						controlport=${ControlPort}
					else
						controlport=${ControlPort##*:}
					fi
					controloutput="${controladdr}:${controlport}"
				fi
				[ "${daily_status_torrelay_ports}" = "YES" ] && output "Control port" "${controloutput}"

				# Get the rest of the info from the running Tor instance,
				# and not from the configuration file,
				# so that we can be sure that we're showing relevant info.

				# Can has cookie?
				cookieauth=$(grep -m 1 '^[[:space:]]*CookieAuthentication[[:space:]]\+1[[:space:]]*$' "${configfile}")
				if [ -z "${cookieauth}" ]; then
					echo " CookieAuthentication failed."
					echo "  Enable CookieAuthentication in ${configfile} for more detailed information."
					rc=2
				else
					authcookie=$(grep -m 1 '^[[:space:]]*CookieAuthFile[[:space:]]' ${configfile})
					[ -z "${authcookie}" ] && authcookie="${DataDirectory}/control_auth_cookie"
					if [ ! -r "${authcookie}" ]; then
						echo " CookieAuthentication failed."
						echo "  CookieAuthFile not found or unreadable (file or directory permissions?)."
						echo "  Correct this for more detailed information."
						rc=2
					else
						# Tor control protocol:
						#   https://gitlab.torproject.org/tpo/core/torspec/-/blob/main/control-spec.txt

						# Get hexadecimal representation of authorization cookie.
						auth=$(hexdump -ve '/1 "%02x"' "${authcookie}")

						[ "${daily_status_torrelay_ports}" = "YES" ] && {

							# SOCKSPort.
							socksport=$( (nc ${controlopt} ${controladdr} ${controlport} <<-EOM
								authenticate ${auth}
								getinfo net/listeners/socks
								quit
								EOM
								) | grep '^250-')
							socksport=${socksport#*\"}
							socksport=${socksport%\"*}
							output "SOCKS port" "${socksport}"

							# ORPort.
							orport=$( (nc ${controlopt} ${controladdr} ${controlport} <<-EOM
								authenticate ${auth}
								getinfo net/listeners/or
								quit
								EOM
								) | grep '^250-')
							orport=${orport#*\"}
							orport=${orport%\"*}
							output "OR port" "${orport}"

							# DirPort.
							dirport=$( (nc ${controlopt} ${controladdr} ${controlport} <<-EOM
								authenticate ${auth}
								getinfo net/listeners/dir
								quit
								EOM
								) | grep '^250-')
							dirport=${dirport#*\"}
							dirport=${dirport%\"*}
							output "Dir port" "${dirport}"

						}

						# Flags.
						flags=$( (nc ${controlopt} ${controladdr} ${controlport} <<-EOM
							authenticate ${auth}
							getinfo ns/id/${fingerprint}
							quit
							EOM
							) | grep '^s ')
						output "Flags" "${flags##s }"
					fi
				fi
			fi
		fi
		;;
	*)
		rc=0
		;;
esac

exit ${rc}
